// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go
//
// Generated by this command:
//
//	mockgen -destination=mock_contract_test.go -package=service -source=contract.go
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	feed_proto "github.com/s21platform/feed-proto/feed-proto"
	gomock "go.uber.org/mock/gomock"
)

// MockDBRepo is a mock of DBRepo interface.
type MockDBRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepoMockRecorder
	isgomock struct{}
}

// MockDBRepoMockRecorder is the mock recorder for MockDBRepo.
type MockDBRepoMockRecorder struct {
	mock *MockDBRepo
}

// NewMockDBRepo creates a new mock instance.
func NewMockDBRepo(ctrl *gomock.Controller) *MockDBRepo {
	mock := &MockDBRepo{ctrl: ctrl}
	mock.recorder = &MockDBRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepo) EXPECT() *MockDBRepoMockRecorder {
	return m.recorder
}

// CreateUserPost mocks base method.
func (m *MockDBRepo) CreateUserPost(ctx context.Context, UUID string, in *feed_proto.CreateUserPostIn) (*feed_proto.CreateUserPostOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPost", ctx, UUID, in)
	ret0, _ := ret[0].(*feed_proto.CreateUserPostOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserPost indicates an expected call of CreateUserPost.
func (mr *MockDBRepoMockRecorder) CreateUserPost(ctx, UUID, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPost", reflect.TypeOf((*MockDBRepo)(nil).CreateUserPost), ctx, UUID, in)
}
